/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "wrapper.go"



#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

typedef struct node {
	int id;
	char *nodeid;
	char *pubkey;
	char *owner;
	char* profitAcc;
	char* poolID;
	char* poolOwner;
	int64_t quota;
	char **addrs;
	int addrsize;
	int32_t cpu;
	int32_t memory;
	int32_t bandwidth;
	int64_t maxDataSpace;
	int64_t assignedSpace;
	int64_t productiveSpace;
	int64_t usedSpace;
	double weight;
	int32_t valid;
	int32_t relay;
	int32_t status;
	int64_t timestamp;
	int32_t version;
	int32_t rebuilding;
	int64_t realSpace;
	int64_t tx;
	int64_t rx;
	char *error;
} node;

typedef struct supernode {
	int id;
	char *nodeid;
	char *pubkey;
	char *privkey;
	char **addrs;
	int addrsize;
	char *error;
} supernode;

typedef struct allocnoderet {
	node **nodes;
	int size;
	char *error;
} allocnoderet;

typedef struct allocsupernoderet {
	supernode **supernodes;
	int size;
	char *error;
} allocsupernoderet;

typedef struct nodestatret {
	int64_t activeMiners;
	int64_t totalMiners;
	int64_t maxTotal;
	int64_t assignedTotal;
	int64_t productiveTotal;
	int64_t usedTotal;
	char *error;
} nodestatret;

typedef struct spotchecktask {
	int32_t id;
	char *nodeid;
	char *addr;
	char *vni;
} spotchecktask;

typedef struct spotchecklist {
	char *taskid;
	spotchecktask **tasklist;
	int size;
	int64_t timestamp;
} spotchecklist;

typedef struct spotchecklists {
	spotchecklist **list;
	int size;
	char *error;
} spotchecklists;

typedef struct vni {
	char *shard;
	int size;
} vni;

typedef struct rebuilditem {
	node *node;
	vni **shards;
	int size;
	char *error;
} rebuilditem;

typedef struct shardcount {
	int32_t id;
	int64_t cnt;
} shardcount;

typedef struct shardcountlist {
	shardcount **shardcounts;
	int size;
	char *error;
} shardcountlist;

typedef struct stringwitherror {
	char *str;
	char *error;
} stringwitherror;

typedef struct intwitherror {
	int id;
	char *error;
} intwitherror;

extern void FreeNode(node *ptr);
extern void FreeSuperNode(supernode *ptr);
extern void FreeSpotchecktask(spotchecktask *ptr);
extern void FreeSpotchecklist(spotchecklist *ptr);
extern void FreeShardcount(shardcount *ptr);
extern void FreeShardcountlist(shardcountlist *ptr);
extern void FreeVNI(vni *ptr);

static char** makeCharArray(int size) {
	char **ret = (char**)malloc(sizeof(char*) * size);
	memset(ret, 0 , sizeof(char*) * size);
	return ret;
}

static void setArrayString(char **a, char *s, int n) {
    a[n] = s;
}

static void freeCharArray(char **a, int size) {
    int i;
    for (i = 0; i < size; i++) {
		free(a[i]);
		a[i] = NULL;
	}
    free(a);
}

static node** makeNodeArray(int size) {
	node **ret = (node**)malloc(sizeof(node*) * size);
	memset(ret, 0 , sizeof(node*) * size);
	return ret;
}

static void setArrayNode(node **nodes, node *node, int n) {
	nodes[n] = node;
}

static void freeNodeArray(node **nodes, int size) {
	int i;
	for (i = 0; i < size; i++) {
		FreeNode(nodes[i]);
		nodes[i] = NULL;
	}
	free(nodes);
}

static supernode** makeSuperNodeArray(int size) {
	supernode **ret = (supernode**)malloc(sizeof(supernode*) * size);
	memset(ret, 0 , sizeof(supernode*) * size);
	return ret;
}

static void setArraySuperNode(supernode **supernodes, supernode *supernode, int n) {
	supernodes[n] = supernode;
}

static void freeSuperNodeArray(supernode **supernodes, int size) {
	int i;
	for (i = 0; i < size; i++) {
		FreeSuperNode(supernodes[i]);
		supernodes[i] = NULL;
	}
	free(supernodes);
}

static spotchecktask** makeSpotchecktaskArray(int size) {
	spotchecktask **ret = (spotchecktask**)malloc(sizeof(spotchecktask*) * size);
	memset(ret, 0 , sizeof(spotchecktask*) * size);
	return ret;
}

static void setSpotchecktaskArray(spotchecktask **spotchecklist, spotchecktask *task, int n) {
	spotchecklist[n] = task;
}

static void freeSpotchecktaskArray(spotchecktask **spotchecklist, int size) {
	int i;
	for (i = 0; i < size; i++) {
		FreeSpotchecktask(spotchecklist[i]);
		spotchecklist[i] = NULL;
	}
	free(spotchecklist);
}

static spotchecklist** makeSpotchecklistArray(int size) {
	spotchecklist **ret = (spotchecklist**)malloc(sizeof(spotchecklist*) * size);
	memset(ret, 0 , sizeof(spotchecklist*) * size);
	return ret;
}

static void setSpotchecklistArray(spotchecklist **spotchecklists, spotchecklist *list, int n) {
	spotchecklists[n] = list;
}

static void freeSpotchecklistArray(spotchecklist **spotchecklists, int size) {
	int i;
	for (i = 0; i < size; i++) {
		FreeSpotchecklist(spotchecklists[i]);
		spotchecklists[i] = NULL;
	}
	free(spotchecklists);
}

static shardcount** makeShardcountArray(int size) {
	shardcount **ret = (shardcount**)malloc(sizeof(shardcount*) * size);
	memset(ret, 0 , sizeof(shardcount*) * size);
	return ret;
}

static void setShardcountArray(shardcount **shardcounts, shardcount *shardcount, int n) {
	shardcounts[n] = shardcount;
}

static void freeShardcountArray(shardcount **shardcounts, int size) {
	int i;
	for (i = 0; i < size; i++) {
		FreeShardcount(shardcounts[i]);
		shardcounts[i] = NULL;
	}
	free(shardcounts);
}

static vni** makeVNIArray(int size) {
	vni **ret = (vni**)malloc(sizeof(vni*) * size);
	memset(ret, 0 , sizeof(vni*) * size);
	return ret;
}

static void setVNIArray(vni **vnis, vni *vni, int n) {
	vnis[n] = vni;
}

static void freeVNIArray(vni **vnis, int size) {
	int i;
	for (i = 0; i < size; i++) {
		FreeVNI(vnis[i]);
		vnis[i] = NULL;
	}
	free(vnis);
}

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern char* NewInstance(char* p0, char* p1, char* p2, char* p3, char* p4, char* p5, char* p6, int32_t p7, int32_t p8);

extern char* SetMaster(int32_t p0);

extern char* ChangeEosURL(char* p0);

extern intwitherror* NewNodeID();

extern char* CallAPI(char* p0, char* p1);

extern node* UpdateNodeStatus(node* p0);

extern char* IncrUsedSpace(int32_t p0, int64_t p1);

extern allocnoderet* AllocNodes(int p0, int* p1, int p2);

extern char* SyncNode(node* p0);

extern allocnoderet* GetNodes(int* p0, int p1);

extern allocsupernoderet* GetSuperNodes();

extern stringwitherror* GetSuperNodePrivateKey(int32_t p0);

extern intwitherror* GetNodeIDByPubKey(char* p0);

extern node* GetNodeByPubKey(char* p0);

extern intwitherror* GetSuperNodeIDByPubKey(char* p0);

extern char* AddDNI(int32_t p0, char* p1, long long int p2);

extern allocnoderet* ActiveNodesList();

extern nodestatret* Statistics();

extern spotchecklists* GetSpotCheckList();

extern node* GetSTNode();

extern allocnoderet* GetSTNodes(int64_t p0);

extern char* UpdateTaskStatus(char* p0, int32_t* p1, int32_t p2);

extern shardcountlist* GetInvalidNodes();

extern rebuilditem* GetRebuildItem(int32_t p0, int64_t p1, int64_t p2);

extern char* DeleteDNI(int32_t p0, char* p1, long long int p2);

extern char* FinishRebuild(int32_t p0);

extern void FreeAllocnoderet(allocnoderet* p0);

extern void FreeNodestatret(nodestatret* p0);

extern void FreeNode(node* p0);

extern void FreeAllocsupernoderet(allocsupernoderet* p0);

extern void FreeSuperNode(supernode* p0);

extern void FreeSpotchecklists(spotchecklists* p0);

extern void FreeSpotchecklist(spotchecklist* p0);

extern void FreeSpotchecktask(spotchecktask* p0);

extern void FreeVNI(vni* p0);

extern void FreeRebuilditem(rebuilditem* p0);

extern void FreeShardcountlist(shardcountlist* p0);

extern void FreeShardcount(shardcount* p0);

extern void FreeStringwitherror(stringwitherror* p0);

extern void FreeIntwitherror(intwitherror* p0);

extern void FreeString(void* p0);

#ifdef __cplusplus
}
#endif
